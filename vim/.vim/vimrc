" vim: set ts=4 sw=4 sts=0:

" Encoding {{{
set encoding=utf-8
scriptencoding utf-8
set fileencodings=utf-8,cp932,eucjp-ms,iso-2022-jp,latin1
set fileformats=unix,dos,mac

" Deal with some double width characters
if exists('&ambiwidth')
	set ambiwidth=double
endif
" }}}

" Environment {{{
command! VimrcReload source $MYVIMRC
function! VimrcEnvironment ()
	let env = {}
	let env.is_win = has('win32')  || has ('win64')

	let userdir = env.is_win
				\ ? expand('$VIM/vimfiles')
				\ : expand('~/.vim')
	let env.path = {
				\ 'user':        userdir,
				\ 'local_vimrc': userdir . '/.vimrc',
				\ 'tmp':         userdir . '/tmp'
				\ }
	return env
endfunction

function! VimrcSupports ()
	let supports = {}
	return supports
endfunction

let s:env = VimrcEnvironment()
let s:supports = VimrcSupports()
" }}}

" Mapping {{{
" Turn off the IME when escaping from Insert mode @Insert
set timeout timeoutlen=1000 ttimeoutlen=75
inoremap <silent> <ESC> <ESC>:<C-u>set iminsert=0<CR>
" Avoid execute <C-@> @Insert
inoremap <C-@> <Nop>
" Yank to end of the line, like 'D' / 'C' @Normal
nnoremap Y y$
" easier to set nohlsearch
nnoremap <Esc><Esc> :noh<CR>

" Emacs-like keybind @Command-line @Insert
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-h> <Backspace>
cnoremap <C-d> <Del>
inoremap <C-h> <Backspace>
inoremap <C-d> <Del>

" Refer to history @Command-line
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
" }}}

set modeline

"-----------------------------------------------------------------------------
" 装飾関連
"
"シンタックスハイライトを有効にする
if has("syntax")
	syntax on
endif

"ファイル拡張子毎にインデント機能をオンに
filetype plugin indent on
"行番号を表示しない
set nonumber
"タブの左側にカーソル表示
set listchars=tab:^\ ,eol:<,trail:_,nbsp:%
set list
"タブ幅を設定する
"set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=0
"入力中のコマンドをステータスに表示する
set showcmd
"括弧入力時の対応する括弧を表示
set showmatch
"検索結果文字列のハイライトを有効にする
set hlsearch
"ステータスラインを常に表示
set laststatus=2
"ステータスラインに文字コードと改行文字を表示する
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P

set whichwrap=b,s,h,l,<,>,[,]

let format_allow_over_tw = 1

function! InnsertTabWrapper()
	let col = col('.) -1
	if !col || getline('.')[col - 1] !~ '\k'
		return "<\TAB>"
	else
		if pumvisible()
			return "\<C-N>"
		else
			return "\<C-N>\<C-P>"
		end
	endif
endfunction

"-----------------------------------------------------------------------------
"Syntax and Extension
autocmd BufNewFile,BufRead *.* set noexpandtab tabstop=4 shiftwidth=4

autocmd BufNewFile,BufRead *.ctp set filetype=php
autocmd BufNewFile,BufRead *.md set filetype=markdown expandtab tabstop=2 shiftwidth=2

"autocmd BufNewFile,BufRead *.php set expandtab tabstop=2 shiftwidth=2
autocmd BufNewFile,BufRead *.html set expandtab tabstop=2 shiftwidth=2
autocmd BufNewFile,BufRead *.css set expandtab tabstop=2 shiftwidth=2
autocmd BufNewFile,BufRead *.js set expandtab tabstop=2 shiftwidth=2

"-----------------------------------------------------------------------------
